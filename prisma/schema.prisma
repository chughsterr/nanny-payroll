// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nanny {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Personal Information
  firstName     String
  lastName      String
  ssn          String    @unique
  dateOfBirth   DateTime
  email         String    @unique
  phone         String
  
  // Address
  street        String
  city          String
  state         String
  zipCode       String
  
  // Employment Information
  startDate     DateTime
  hourlyRate    Decimal   @db.Decimal(10, 2)
  weeklyHours   Int
  payFrequency  PayFrequency
  status        EmploymentStatus @default(ACTIVE)
  
  // Tax Information
  w4Info        W4Info?
  directDeposit DirectDeposit?
  timesheets    Timesheet[]
  payrolls      Payroll[]
}

model W4Info {
  id                    String  @id @default(uuid())
  nannyId              String  @unique
  nanny                Nanny   @relation(fields: [nannyId], references: [id])
  
  // 2024 W-4 Information
  multipleJobs         Boolean @default(false)
  claimDependents      Boolean @default(false)
  dependentAmount      Decimal @default(0) @db.Decimal(10, 2)
  otherIncome         Decimal @default(0) @db.Decimal(10, 2)
  deductions          Decimal @default(0) @db.Decimal(10, 2)
  additionalWithholding Decimal @default(0) @db.Decimal(10, 2)
  
  lastUpdated         DateTime @updatedAt
}

model DirectDeposit {
  id            String  @id @default(uuid())
  nannyId       String  @unique
  nanny         Nanny   @relation(fields: [nannyId], references: [id])
  
  routingNumber String
  accountNumber String
  accountType   AccountType
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Timesheet {
  id            String   @id @default(uuid())
  nannyId       String
  nanny         Nanny    @relation(fields: [nannyId], references: [id])
  
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  breakDuration Int      // in minutes
  regularHours  Decimal  @db.Decimal(10, 2)
  overtimeHours Decimal  @db.Decimal(10, 2)
  
  status        TimesheetStatus @default(PENDING)
  notes         String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payroll {
  id            String   @id @default(uuid())
  nannyId       String
  nanny         Nanny    @relation(fields: [nannyId], references: [id])
  
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  
  grossPay      Decimal  @db.Decimal(10, 2)
  federalTax    Decimal  @db.Decimal(10, 2)
  socialSecurity Decimal  @db.Decimal(10, 2)
  medicare      Decimal  @db.Decimal(10, 2)
  stateTax      Decimal  @db.Decimal(10, 2)
  netPay        Decimal  @db.Decimal(10, 2)
  
  status        PayrollStatus @default(PENDING)
  paidDate      DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum PayFrequency {
  WEEKLY
  BIWEEKLY
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum AccountType {
  CHECKING
  SAVINGS
}

enum TimesheetStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
  VOID
}